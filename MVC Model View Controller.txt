https://www.theodinproject.com/courses/ruby-on-rails/lessons/a-railsy-web-refresher



MVC
You’ve heard about it again and again, but do you really know what MVC is? Errrrmmmmm, ummm….

MVC is all about organization and Rails is all about MVC. When you build a new Rails project, you get that giant mass of folders and files created. Though it seems like there is an overwhelming number of files inside your app directory, they are highly organized and specifically meant to separate the Model, View, and Controller.

The point of MVC is that the functions of a web application can be broken down into more or less distinct parts. Each part gets its own Ruby class. That’s great for you the developer because, when you want to tweak a specific part of the code base or fix a bug, you know exactly which file to modify and where it is.

The Path Through MVC
Once a request from a browser comes into your application, at the most basic level:

The router figures out which controller to send it to (e.g. for your blog, the Posts controller).
That controller asks the model (e.g. Post model) for data and any other tough questions it has.
Then that controller passes off whatever data it needs to the views (e.g. index.html.erb), which are basically just HTML templates that are waiting for those variables.
Once the proper view has been pumped full of the data it needs (like the current user’s name), it gets sent back to the client that made the original request. Presto!
Check out a more detailed version of MVC on betterexplained.com HERE

To characterize the three (badly), the model is the supersmart geek in the back room, the controller is the social middleman that talks to everyone but doesn’t really do anything too intensive (it asks the model in those cases), and the view just looks pretty and waits to get its outfit from the controller.

Just roll with it, you’ll see it in action and learn to love it.
